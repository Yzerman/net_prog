//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.Phone.ServiceReference, version 3.7.0.0
// 
namespace PivotApp1.ServiceReference1 {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PSRequest", Namespace="http://schemas.datacontract.org/2004/07/Service")]
    public partial class PSRequest : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string commandField;
        
        private int pinCodeField;
        
        private string remotePathField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string command {
            get {
                return this.commandField;
            }
            set {
                if ((object.ReferenceEquals(this.commandField, value) != true)) {
                    this.commandField = value;
                    this.RaisePropertyChanged("command");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int pinCode {
            get {
                return this.pinCodeField;
            }
            set {
                if ((this.pinCodeField.Equals(value) != true)) {
                    this.pinCodeField = value;
                    this.RaisePropertyChanged("pinCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string remotePath {
            get {
                return this.remotePathField;
            }
            set {
                if ((object.ReferenceEquals(this.remotePathField, value) != true)) {
                    this.remotePathField = value;
                    this.RaisePropertyChanged("remotePath");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PSResponse", Namespace="http://schemas.datacontract.org/2004/07/Service")]
    public partial class PSResponse : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string psResultField;
        
        private int statusCodeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string psResult {
            get {
                return this.psResultField;
            }
            set {
                if ((object.ReferenceEquals(this.psResultField, value) != true)) {
                    this.psResultField = value;
                    this.RaisePropertyChanged("psResult");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int statusCode {
            get {
                return this.statusCodeField;
            }
            set {
                if ((this.statusCodeField.Equals(value) != true)) {
                    this.statusCodeField = value;
                    this.RaisePropertyChanged("statusCode");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="Service", ConfigurationName="ServiceReference1.IPSRemoting")]
    public interface IPSRemoting {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Service/IPSRemoting/invokeCommand", ReplyAction="Service/IPSRemoting/invokeCommandResponse")]
        System.IAsyncResult BegininvokeCommand(PivotApp1.ServiceReference1.PSRequest datainput, System.AsyncCallback callback, object asyncState);
        
        PivotApp1.ServiceReference1.PSResponse EndinvokeCommand(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPSRemotingChannel : PivotApp1.ServiceReference1.IPSRemoting, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class invokeCommandCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public invokeCommandCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public PivotApp1.ServiceReference1.PSResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((PivotApp1.ServiceReference1.PSResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PSRemotingClient : System.ServiceModel.ClientBase<PivotApp1.ServiceReference1.IPSRemoting>, PivotApp1.ServiceReference1.IPSRemoting {
        
        private BeginOperationDelegate onBegininvokeCommandDelegate;
        
        private EndOperationDelegate onEndinvokeCommandDelegate;
        
        private System.Threading.SendOrPostCallback oninvokeCommandCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public PSRemotingClient() {
        }
        
        public PSRemotingClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PSRemotingClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PSRemotingClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PSRemotingClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<invokeCommandCompletedEventArgs> invokeCommandCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult PivotApp1.ServiceReference1.IPSRemoting.BegininvokeCommand(PivotApp1.ServiceReference1.PSRequest datainput, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegininvokeCommand(datainput, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        PivotApp1.ServiceReference1.PSResponse PivotApp1.ServiceReference1.IPSRemoting.EndinvokeCommand(System.IAsyncResult result) {
            return base.Channel.EndinvokeCommand(result);
        }
        
        private System.IAsyncResult OnBegininvokeCommand(object[] inValues, System.AsyncCallback callback, object asyncState) {
            PivotApp1.ServiceReference1.PSRequest datainput = ((PivotApp1.ServiceReference1.PSRequest)(inValues[0]));
            return ((PivotApp1.ServiceReference1.IPSRemoting)(this)).BegininvokeCommand(datainput, callback, asyncState);
        }
        
        private object[] OnEndinvokeCommand(System.IAsyncResult result) {
            PivotApp1.ServiceReference1.PSResponse retVal = ((PivotApp1.ServiceReference1.IPSRemoting)(this)).EndinvokeCommand(result);
            return new object[] {
                    retVal};
        }
        
        private void OninvokeCommandCompleted(object state) {
            if ((this.invokeCommandCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.invokeCommandCompleted(this, new invokeCommandCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void invokeCommandAsync(PivotApp1.ServiceReference1.PSRequest datainput) {
            this.invokeCommandAsync(datainput, null);
        }
        
        public void invokeCommandAsync(PivotApp1.ServiceReference1.PSRequest datainput, object userState) {
            if ((this.onBegininvokeCommandDelegate == null)) {
                this.onBegininvokeCommandDelegate = new BeginOperationDelegate(this.OnBegininvokeCommand);
            }
            if ((this.onEndinvokeCommandDelegate == null)) {
                this.onEndinvokeCommandDelegate = new EndOperationDelegate(this.OnEndinvokeCommand);
            }
            if ((this.oninvokeCommandCompletedDelegate == null)) {
                this.oninvokeCommandCompletedDelegate = new System.Threading.SendOrPostCallback(this.OninvokeCommandCompleted);
            }
            base.InvokeAsync(this.onBegininvokeCommandDelegate, new object[] {
                        datainput}, this.onEndinvokeCommandDelegate, this.oninvokeCommandCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override PivotApp1.ServiceReference1.IPSRemoting CreateChannel() {
            return new PSRemotingClientChannel(this);
        }
        
        private class PSRemotingClientChannel : ChannelBase<PivotApp1.ServiceReference1.IPSRemoting>, PivotApp1.ServiceReference1.IPSRemoting {
            
            public PSRemotingClientChannel(System.ServiceModel.ClientBase<PivotApp1.ServiceReference1.IPSRemoting> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BegininvokeCommand(PivotApp1.ServiceReference1.PSRequest datainput, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = datainput;
                System.IAsyncResult _result = base.BeginInvoke("invokeCommand", _args, callback, asyncState);
                return _result;
            }
            
            public PivotApp1.ServiceReference1.PSResponse EndinvokeCommand(System.IAsyncResult result) {
                object[] _args = new object[0];
                PivotApp1.ServiceReference1.PSResponse _result = ((PivotApp1.ServiceReference1.PSResponse)(base.EndInvoke("invokeCommand", _args, result)));
                return _result;
            }
        }
    }
}
